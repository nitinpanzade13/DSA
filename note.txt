1

A. Create Binary tree and perform following operations:
a. Insert
b. Display
c. Find Depth of a tree
d. Display leaf-nodes
e. Create a copy of a tree.

#include<iostream>
#include<queue>
using namespace std;

struct Node{
    int data;
    Node* left;
    Node* right;

    Node(int val){
        data=val;
        left=nullptr;
        right=nullptr;
    } 
};

Node* insert(Node* root, int data){
    if(root==nullptr){
        return new Node(data);
    }

    queue<Node*> q;
    q.push(root);

    while (!q.empty())
    {
        Node* temp = q.front();
        q.pop();

        if(!temp->left){
            temp->left= new Node(data);
            break;
        }
        else {
            q.push(temp->left);
        }

        if (!temp->right)
        {
            temp->right=new Node(data);
            break;
        }
        else{
            q.push(temp->right);
        }
    }
    return root;
}

void display(Node* root){
    if(root==nullptr) return;

    queue<Node*> q;
    q.push(root);

    while (!q.empty())
    {
        Node* temp = q.front();
        q.pop();
        cout<<temp->data <<" ";

        if(temp->left){
            q.push(temp->left);
        }
        if(temp->right){
            q.push(temp->right);
        }
    }
    cout<<endl;
}

int findDepth(Node* root){
    if (root==nullptr) return 0;
    
    queue<Node*> q;
    q.push(root);
    int depth=0;

    while (!q.empty())
    {
        int size=q.size();
        depth++;
        
        for(int i=0;i<size;i++){
        Node* temp = q.front();
        q.pop();

        if(temp->left) q.push(temp->left);
        if(temp->right) q.push(temp->right);
        }
    }

    return depth;
}

void displayLeefNode(Node* root){
    if(root==nullptr) return ;

    queue<Node*> q;
    q.push(root);

    while(!q.empty()){
        Node* temp = q.front();
        q.pop();

        if(!temp->left && !temp->right){
            cout<< temp->data << " ";
        }

        if(temp->left) q.push(temp->left);
        if(temp->right) q.push(temp->right);
    }
    cout<< endl;
}

Node* copyTree(Node* root){
    if(root==nullptr) return nullptr;

    Node* newRoot = new Node(root->data);
    queue<pair<Node* , Node*>> q;

    q.push({root,newRoot});

    while(!q.empty()){
        Node* orgNode = q.front().first;
        Node* cpyNode = q.front().second;
        q.pop();

        if(orgNode->left){
            cpyNode->left = new Node(orgNode->left->data);
            q.push({orgNode->left,cpyNode->left}); 
        } 

        if(orgNode->right){
            cpyNode->right= new Node(orgNode->right->data);
            q.push({orgNode->right,cpyNode->right});
        }
    }
    return newRoot;
}


int main(){
    Node* root = nullptr;
    char choice; 
    int val;

    do{
        cout<<"Enter any option : "<< endl;
        cout<<"1. insert"<<endl;
        cout<<"2. display"<<endl;
        cout<<"3. find Depth"<<endl;
        cout<<"4. diplay leap nodes"<<endl;
        cout<<"5. Copy Tree"<<endl;
        cout<<"6. exit!"<<endl;

        cin>>choice;

        switch(choice){
            case "1" :
                cout<<"Enter any value : ";
                cin>>val;
                root=insert(root,val);
                cout<<endl;
                break;
            case '2' :
                display(root);
                cout<<endl;
                break;
            case '3' :
                cout<<"Depth of Tree : "<<findDepth(root);
                cout<<endl;
                break;
            case '4' : 
                cout<<"Leap Nodes : ";
                displayLeefNode(root);
                cout<<endl;
                break;
            case '5' :
                cout<<"Copied tree : ";
                display(copyTree(root));
                cout<<endl;
                break; 
            case '6' :
                cout<<"Exited !!"  ;  
                break;
            default :
                cout<<"Enter correct choice!";
                break;     
        }
    }while(choice!='6');

    return 0;
}



B. Implement binary search tree and perform following operations:
a. Insert b. Delete c. Display d. Search e. BFS (Level wise print)


#include <iostream>
#include <queue> // For BFS
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
};

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->left = newNode->right = nullptr;
    return newNode;
}

// Insert a node in the BST
Node* insert(Node* root, int data) {
    if (root == nullptr) {
        root = createNode(data);
    } else if (data < root->data) {
        root->left = insert(root->left, data);
    } else {
        root->right = insert(root->right, data);
    }
    return root;
}

// In-order display of the BST (sorted order)
void inorderDisplay(Node* root) {
    if (root != nullptr) {
        inorderDisplay(root->left);
        cout << root->data << " ";
        inorderDisplay(root->right);
    }
}

// Search a node in the BST
Node* search(Node* root, int key) {
    if (root == nullptr || root->data == key)
        return root;
    if (key < root->data)
        return search(root->left, key);
    return search(root->right, key);
}

// Find the minimum value node
Node* findMin(Node* root) {
    while (root->left != nullptr)
        root = root->left;
    return root;
}

// Delete a node from the BST
Node* deleteNode(Node* root, int key) {
    if (root == nullptr)
        return root;
    
    if (key < root->data) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        root->right = deleteNode(root->right, key);
    } else {
        // Node with only one child or no child
        if (root->left == nullptr) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == nullptr) {
            Node* temp = root->left;
            delete root;
            return temp;
        }

        // Node with two children: Get the inorder successor (smallest in the right subtree)
        Node* temp = findMin(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// BFS (Level order traversal)
void bfs(Node* root) {
    if (root == nullptr) return;

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        Node* current = q.front();
        cout << current->data << " ";
        q.pop();

        if (current->left != nullptr)
            q.push(current->left);
        if (current->right != nullptr)
            q.push(current->right);
    }
}

int main() {
    Node* root = nullptr;
    char choice;
    int value;

    do {
        cout << "\n1. Insert";
        cout << "\n2. Delete";
        cout << "\n3. Display (In-order)";
        cout << "\n4. Search";
        cout << "\n5. BFS (Level-wise Print)";
        cout << "\n6. Exit";
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case '1':
                cout << "Enter value to insert: ";
                cin >> value;
                root = insert(root, value);
                break;
            case '2':
                cout << "Enter value to delete: ";
                cin >> value;
                root = deleteNode(root, value);
                break;
            case '3':
                cout << "In-order traversal: ";
                inorderDisplay(root);
                cout << endl;
                break;
            case '4':
                cout << "Enter value to search: ";
                cin >> value;
                if (search(root, value) != nullptr)
                    cout << "Value found!" << endl;
                else
                    cout << "Value not found!" << endl;
                break;
            case '5':
                cout << "Level-wise BFS: ";
                bfs(root);
                cout << endl;
                break;
            case '6':
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice!" << endl;
        }
    } while (choice != 6);

    return 0;
}
